plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.sonarqube'

    id 'com.google.firebase.appdistribution'
    id 'com.google.gms.google-services'
}


android {
    namespace 'com.example.cicdgithubactions'
    compileSdk 33
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.example.cicdgithubactions"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ext.config = getProps("$rootDir/config/release.properties")
            ext.config.each { p ->

                if (p.key == "APPNAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else
                    buildConfigField 'String', p.key, p.value
            }
        }

        staging {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ext.config = getProps("$rootDir/config/staging.properties")
            ext.config.each { p ->
                if (p.key == "APPNAME") {
                    resValue "string", "app_name", p.value.replace('"', '')
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else {
                    buildConfigField 'String', p.key, p.value
                }
            }
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.config = getProps("$rootDir/config/development.properties")
            ext.config.each { p ->
                if (p.key == "APPNAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else
                    buildConfigField 'String', p.key, p.value
            }
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

static def getProps(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(new File(path)))
    return props
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    testImplementation 'com.google.truth:truth:1.1'
    testImplementation 'app.cash.turbine:turbine:0.12.1'
}